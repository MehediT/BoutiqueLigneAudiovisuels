@startuml
'hide circle
hide @unlinked
skinparam linetype ortho
skinparam lineStyle jumps




'------IHM --------------------------'
class ContacteIHM {
+ afficherFormulaireContact(): void
+ afficherPageProduit(): void
+ afficherPageCategorie(): void
+ envoyerMessage(): void
+ afficheListDestinatairs(): void
}

class ProduitIHM {
+ afficherProduit(): void
+ afficherListProduits(): void
+ afficherCategorie(): void
+ afficherFormulaireContact(): void
+ SelectionnerProduit(): void
+ rechercherProduit(): void


}
class CategorieIHM {
 + afficherCategories(): void
 +afficherCategorieSelectionne(): void
 + afficherProduit(): void
 + afficherFormulaireContact(): void


}

class DetailleProduitIHM {
 + afficherDetailleProduit(): void
 + ajouterProduitAuPanier(): void
 + NoterLEntrprise(): void

}


class PanierIHM {
+ affichePanier(): void
+ validerPanier(): void
+ supprimerProduitDuPanier(): void
+ modifierQuantiteProduit(): void

}

class AchatIHM {
+ afficherFormulaireAdresse(): void
}

class ResultatPaymenetIHM {
+ afficherResultatPayement(): void
}

class HomeIHM {
+ afficherHome(): void
+ afficherPromotion(): void
}

class ConnexionIHM {
+ afficherFormulaireConnexion(): void
+afficherInscription(): void

}

class InscriptionIHM {
+ afficherFormulaireInscription(): void
}




'-------------------Controleur-------------------'
class CompteControleur {
+ getCompte(): List<Utilisateur>
+ creeUnCompte(): boolean

}

class ContacteControleur {
+ validerMessage(): boolean
}

class ProduitControleur {
+ getProduits(): List<Produit>
+ getCategorieProduits(): List<Categorie>
+ rechercherProduit(): List<Produit>
+ getProduitPromotion(): List<Produit>
}


class PanierControleur {
+ getPanier(): List<Produit>
+ ajouterProduitAuPanier(): boolean
+ validerPanier(): boolean
+ supprimerProduitDuPanier(): boolean
}

class AchatControleur {
+ validerPayement(): boolean
}


class CommandeControleur {
+ creeCommande(Panier p): boolean
}

class ConnexionControleur {
+ validerConnexion(String mail , String password): boolean
}


class NavigationControleur {
+ redirigerVersPage(String route): void
}





'-------------------Laison-------------------'
'ContacteIHM -r- ProduitIHM
'ProduitIHM -r- CategorieIHM
'ProduitIHM -- DetailleProduitIHM
'CategorieIHM -r- PanierIHM

NavigationControleur <--> ContacteIHM
NavigationControleur <--> ProduitIHM
NavigationControleur <--> CategorieIHM
NavigationControleur <--> DetailleProduitIHM
NavigationControleur <--> PanierIHM
NavigationControleur <--> HomeIHM
NavigationControleur <--> ConnexionIHM



ContacteIHM --> ContacteControleur
ContacteIHM --> CompteControleur

ContacteControleur --> Message
CompteControleur --> Compte

ProduitIHM --> ProduitControleur

ProduitControleur --> Produit
ProduitControleur --> Categorie

CategorieIHM --> ProduitControleur

DetailleProduitIHM --> ProduitControleur
DetailleProduitIHM --> PanierControleur

PanierIHM --> PanierControleur
PanierIHM -- AchatIHM

PanierControleur --> Panier

AchatIHM --> AchatControleur
AchatIHM -- ResultatPaymenetIHM

ResultatPaymenetIHM <-- AchatControleur
ResultatPaymenetIHM --> CommandeControleur

CommandeControleur --> Commande

ConnexionIHM --> ConnexionControleur
ConnexionIHM --> InscriptionIHM


ConnexionControleur --> Compte
ConnexionControleur --> HomeIHM

InscriptionIHM --> CompteControleur

class BoutiqueEntity {

}

abstract class Compte <<abstract>> {
    - int id
    - String email
    - String motDePasse
    - String nom
    - String prenom
    - String avatar

}

interface Client <<interface>>{

}


class Produit {
    - int id
    - String nom
    - String description
    - double prix
    - int stock
    - boolean promotion
}

class Commande {
    - int id
    - String numeroCommande
    - Date dateCommande
    - String statut
}

class Panier {
    - int id
    - int numeroPanier
}

class Categorie {
    - int id
    - String nom
}
'
''------------------------------------------------
'Relations

class Message {
    - int id
    - String message
    - String contactEmail
}
'
''------------------------------------------------
'' Noms d'associations
''Y a des espaces pour aligner les noms
'
'' Boutique gère plusieurs comptes
'BoutiqueEntity "0..*  " -- "1  " Compte : "gère"
'
'' Boutique contient plusieurs commandes
'BoutiqueEntity "0..*" -- "1     " Commande : " contient"
'
'' Boutique regroupe plusieurs catégories
'BoutiqueEntity "0..*" -- "1" Categorie : " regroupe"
'
'' Boutique propose plusieurs produits
'BoutiqueEntity "0..*" -- "     1" Produit : " propose"
'
'' Héritage / spécialisation
'Administrateur --|> Compte
'Utilisateur --|> Compte
'
'' Implémentation de l'interface Client
'Visiteur ..|> Client
'Utilisateur ..|> Client
'
'' Un produit peut appartenir à plusieurs catégories, et vice versa
'Produit "*" -- "*" Categorie : "appartient"
'
'' Un panier (0..1) peut contenir plusieurs produits
'Panier "0..1 " -- "\t* " Produit : " contient"
'
'' Une commande (1) est liée à un panier (0..1)
'Commande "1" -- "0..1" Panier : " est liée à"
'
'' Une commande est passée par plusieurs utilisateurs éventuels (ou un)
'Commande "1 " -- "0..* " Utilisateur : " passe"
'
'' Un client possède un ou plusieurs paniers
'Client "0..*" -- "1  " Panier : "possède\n"
'
'' Plusieurs notes pour un même produit
'Produit "0..* " -- "1 " Note : " note"
'
'' Un compte est lié à une messagerie
'Message "1" --> "1\n" Compte : "associée à"

@enduml
